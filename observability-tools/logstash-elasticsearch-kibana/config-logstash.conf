input {
  tcp {
    type => "rsyslog"
    port => 10514
  }
  http {
    type => "json"
    port => 8080    
  }
}
 
filter {
  if [type] == "rsyslog" {
    grok {
      match => { "message" => "<%{POSINT}>1 %{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST} %{DATA} +(%{POSINT}|-) %{BASE16NUM:syslog_msgid}:%{POSINT:syslog_loglevel}: \[F5@[0-9]?(%{GREEDYDATA:syslog_structured_data})\] %{GREEDYDATA:syslog_message}" }
      # add_field => [ "received_at", "%{@timestamp}" ]
      # add_field => [ "received_from", "%{host}" ]
    }
    mutate {
      remove_field => [
        "host",
        "port"
      ]
    }
    date {
      match => [ "syslog_timestamp", "ISO8601" ]
    }
    # syslog_pri { }
    kv {
      source => "syslog_structured_data"
      # transform_key => "lowercase"
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "message", "%{syslog_message}" ]
      }
    }
 
    if [syslog_loglevel] == "7" {
    # drop {}
    } else if [syslog_msgid] == "01c40000" {
      mutate {
        rename => { "CS_TLS_SID" => "[client][ssl][session_id]" }
        rename => { "SS_TLS_SID" => "[server][ssl][session_id]" }
        rename => { "Client_cipher" => "[client][ssl][cipher]" }
        rename => { "Server_cipher" => "[server][ssl][cipher]" }
        rename => { "Client_cipher_version" => "[client][ssl][version]" }
        rename => { "Server_cipher_version" => "[server][ssl][version]" }
        rename => { "Client_bytes_in" => "[client][bytes_in]" }
        rename => { "Server_bytes_in" => "[server][bytes_in]" }
        rename => { "Client_bytes_out" => "[client][bytes_out]" }
        rename => { "Server_bytes_out" => "[server][bytes_out]" }
        rename => { "SSL_Action" => "ssl_action" }
        rename => { "Hostname" => "server_name" }
        rename => { "Client_address" => "[client][source_address]" }
        rename => { "Client_port" => "[client][source_port]" }
        rename => { "Destination_address" => "[client][destination_address]" }
        rename => { "Destination_port" => "[client][destination_port]" }
        rename => { "Access_Profile" => "access_profile" }
        rename => { "Policy_Action" => "policy_action" }
        rename => { "Virtual_Server" => "virtual_server" }
        rename => { "L7_protocol" => "l7_protocol" }
        rename => { "Service_path" => "service_path" }
        rename => { "IP_Proto" => "ip_protocol" }
        rename => { "Age" => "age" }
        rename => { "Session_ID" => "access_session_id" }
        add_field => { "connflow" => "%{[client][source_address]}:%{[client][source_port]} -> %{[client][destination_address]}:%{[client][destination_port]}" }
        remove_field => [
          "syslog_msgid",
          "session_id"
        ]
        convert => {
          "[client][bytes_in]" => "integer"
          "[server][bytes_in]" => "integer"
          "[client][bytes_out]" => "integer"
          "[server][bytes_out]" => "integer"
          "[client][source_port]" => "integer"
          "[client][destination_port]" => "integer"
          "age" => "integer"
        }
      }
    } else if [syslog_msgid] == "01260004" and [Entity] == "server" {
      mutate {
        rename => { "Session_ID" => "[client][ssl][session_id]" }
        rename => { "Connflow" => "connflow" }
        rename => { "Key_Exchange_Size" => "[client][ssl][key_exchange_size]" }
        rename => { "Authentication" => "[client][ssl][authentication]" }
        rename => { "Suite" => "[client][ssl][cipher]" }
        rename => { "Client_Cert" => "[client][ssl][client_cert]" }
        rename => { "Server_Cert" => "[client][ssl][server_cert]" }
        rename => { "Profile_Name" => "[client][ssl][profile]" }
        rename => { "Version" => "[client][ssl][version]" }
        rename => { "Proto" => "ip_protocol" }
        remove_field => [
          "syslog_msgid",
          "session_id",
          "Entity"
        ]
        lowercase => [ "ip_protocol" ]
        convert => {
          "[client][ssl][authentication]" => "boolean"
          "[client][ssl][key_exchange_size]" => "integer"
        }
      }
    } else if [syslog_msgid] == "01260004" and [Entity] == "client" {
      mutate {
        rename => { "Session_ID" => "[server][ssl][session_id]" }
        rename => { "Connflow" => "connflow" }
        rename => { "Key_Exchange_Size" => "[server][ssl][key_exchange_size]" }
        rename => { "Authentication" => "[server][ssl][authentication]" }
        rename => { "Suite" => "[server][ssl][cipher]" }
        rename => { "Client_Cert" => "[server][ssl][client_cert]" }
        rename => { "Server_Cert" => "[server][ssl][server_cert]" }
        rename => { "Profile_Name" => "[server][ssl][profile]" }
        rename => { "Version" => "[server][ssl][version]" }
        rename => { "Proto" => "ip_protocol" }
        remove_field => [
          "syslog_msgid",
          "session_id",
          "Entity"
        ]
        lowercase => [ "ip_protocol" ]
        convert => {
          "[server][ssl][authentication]" => "boolean"
          "[server][ssl][key_exchange_size]" => "integer"
        }
      }
    } else if [syslog_msgid] == "01260003" and [Entity] == "server" {
      mutate {
        rename => { "Session_ID" => "[client][ssl][session_id]" }
        rename => { "Cert_Type" => "cert_type" }
        rename => { "Connflow" => "connflow" }
        rename => { "Fingerprint" => "[server][ssl][server_cert]" }
        rename => { "Profile_Name" => "[client][ssl][profile]" }
        rename => { "Subject" => "[server][ssl][server_cert_dn]" }
        rename => { "Proto" => "ip_protocol" }
        remove_field => [
          "syslog_msgid",
          "session_id",
          "Entity"
        ]
        lowercase => [ "ip_protocol" ]
      }
    } else if [syslog_msgid] == "01d80000" {
      ruby {
        code => 'require "open3"
                 pem = event.get("Certificate")
                 cmd =  "/tmp/openssl.sh \"#{pem}\""
                 stdin, stdout, stderr = Open3.popen3(cmd)
                 event.set("process_result", stdout.read)
                 err = stderr.read
                 if err.to_s.empty?
                   filter_matched(event)
                 else
                   event.set("ext_script_err_msg", err)
                 end'
      }
      mutate {
        rename => { "Certificate" => "[client][ssl][server_cert_pem]" }
        rename => { "Fingerprint" => "[client][ssl][server_cert]" }
        rename => { "Serial_Number" => "[client][ssl][server_cert_serial]" }
        rename => { "Subject" => "[client][ssl][server_cert_subject_cn]" }
        rename => { "Profile_Name" => "[client][ssl][profile]" }
        remove_field => [
          "syslog_msgid"
        ]
      }
    } else if [syslog_msgid] == "01260001" and [Entity] == "server" {
      mutate {
        rename => { "Session_ID" => "[client][ssl][session_id]" }
        rename => { "Connflow" => "connflow" }
        rename => { "Profile_Name" => "[client][ssl][profile]" }
        rename => { "Reason" => "[client][ssl][bypass_reason]" }
        rename => { "Proto" => "ip_protocol" }
        remove_field => [
          "syslog_msgid",
          "session_id",
          "Entity"
        ]
        lowercase => [ "ip_protocol" ]
      }
    } else if [syslog_msgid] == "01260002" and [Entity] == "server" {
      mutate {
        rename => { "Session_ID" => "[client][ssl][session_id]" }
        rename => { "Connflow" => "connflow" }
        rename => { "Profile_Name" => "[client][ssl][profile]" }
        rename => { "Reason" => "[client][ssl][bypass_reason]" }
        rename => { "Proto" => "ip_protocol" }
        remove_field => [
          "syslog_msgid",
          "session_id",
          "Entity"
        ]
        lowercase => [ "ip_protocol" ]
      }
    } else if [syslog_msgid] == "01260005" and [Entity] == "server" {
      drop {}
    } else if [syslog_msgid] == "01260009" {
      grok {
        "match" => { "message" => "%{IP:[client][source_address]}:%{POSINT:[client][source_port]} -> %{IP:[client][destination_address]}:%{POSINT:[client][destination_port]}: Connection error: %{GREEDYDATA}" }
      }
      mutate {
        add_field => { "connflow" => "%{[client][source_address]}:%{[client][source_port]} -> %{[client][destination_address]}:%{[client][destination_port]}" }
        remove_field => [
          "syslog_msgid"
        ]
      }
    } else if [syslog_msgid] == "01260013" {
      grok {
        "match" => { "message" => "SSL Handshake failed for %{WORD:ip_protocol} %{IP:[client][source_address]}:%{POSINT:[client][source_port]} -> %{IP:[client][destination_address]}:%{POSINT:[client][destination_port]}" }
      }
      mutate {
        add_field => { "connflow" => "%{[client][source_address]}:%{[client][source_port]} -> %{[client][destination_address]}:%{[client][destination_port]}" }
        remove_field => [
          "syslog_msgid"
        ]
        lowercase => [ "ip_protocol" ]
      }
    } else if [syslog_msgid] == "01260026" {
      grok {
        "match" => { "message" => "No shared ciphers between SSL peers %{IP:[client][source_address]}.%{POSINT:[client][source_port]}:%{IP:[client][destination_address]}.%{POSINT:[client][destination_port]}." }
      }
      mutate {
        add_field => { "connflow" => "%{[client][source_address]}:%{[client][source_port]} -> %{[client][destination_address]}:%{[client][destination_port]}" }
        remove_field => [
          "syslog_msgid"
        ]
      }
    }
 
    mutate {
      remove_field => [
        "syslog_hostname",
        "syslog_program",
        "syslog_message",
        "syslog_timestamp",
        "syslog_severity",
        "syslog_loglevel",
        "syslog_facility_code",
        "syslog_structured_data",
        "Partition",
        "partition_name"
      ]
    }
  } else if [type] == "json" {
    json {
      source => "message"
    }
  }
}
 
output {
  if ("_grokparsefailure" in [tags] or "" in [syslog_msgid]) {
    stdout {
      codec => rubydebug
    }
  } else if [type] == "json" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      codec => json 
      index => "f5sslotelemetry"
    }
  } else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
    }
  }
}